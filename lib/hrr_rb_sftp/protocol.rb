module HrrRbSftp

  #
  # This class implements SFTP protocol operations.
  #
  class Protocol
    include Loggable

    #
    # @return [Array] A list of SFTP protocol versions that the library supports.
    #
    def self.versions
      constants.select{|c| c.to_s.start_with?("Version")}.map{|c| const_get(c)}.map{|klass| klass::PROTOCOL_VERSION}
    end

    #
    # @return [Array] A list of extension-pair that the library supports.
    #
    def self.extension_pairs version
      version_class = const_get(:"Version#{version}")
      if version_class.const_defined?(:Extensions)
        version_class::Extensions.extension_pairs
      else
        []
      end
    end

    #
    # @param version [Integer] Protocol version.
    # @param logger [Logger] Logger.
    #
    def initialize version, logger: nil
      self.logger = logger

      @context = Hash.new
      @context[:version] = version
      @context[:handles] = Hash.new
      @packets = self.class.const_get(:"Version#{version}")::Packets.new(@context, logger: logger)
    end

    #
    # Responds to a request.
    #
    # @param request_payload [String] Request payload.
    # @return [String] Response payload that is encoded packet generated by each SFTP protocol version and each request responder.
    #
    def respond_to request_payload
      @packets.respond_to request_payload
    end

    #
    # Closes opened and not closed handles.
    #
    def close_handles
      log_info { "closing handles" }
      @context[:handles].each do |k, v|
        v.close rescue nil
      end
      @context[:handles].clear
      log_info { "handles closed" }
    end
  end
end

require "hrr_rb_sftp/protocol/common"
require "hrr_rb_sftp/protocol/version1"
require "hrr_rb_sftp/protocol/version2"
require "hrr_rb_sftp/protocol/version3"
